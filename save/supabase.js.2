// save/supabase.js - Vers√£o FINAL, COMPLETA, RESTAURADA e CORRIGIDA

// GUARDA DE SEGURAN√áA: Garante que a biblioteca e a config.js foram carregadas PRIMEIRO.
if (typeof supabase === 'undefined' || !window.SUPABASE_CONFIG) {
    throw new Error("FATAL: A biblioteca Supabase (supabase-js) ou config.js n√£o foi carregada ANTES de supabase.js.");
}

const { createClient } = supabase;

class SupabaseSync {
    constructor() {
        console.log('üîÑ Inicializando SupabaseSync...');
        try {
            this.supabase = createClient(window.SUPABASE_CONFIG.url, window.SUPABASE_CONFIG.anonKey);
            this.currentUser = null;
            this.checkExistingLogin();
            console.log('üëç Cliente Supabase criado com sucesso.');
        } catch (error) {
            console.error("‚ùå Erro CR√çTICO ao criar cliente Supabase:", error);
            throw error;
        }
    }

    // --- M√©todos de Autentica√ß√£o e Usu√°rio ---

    checkExistingLogin() {
        const savedUser = localStorage.getItem('supabase_user');
        if (savedUser) {
            try {
                this.currentUser = JSON.parse(savedUser);
                console.log(`üë§ Sess√£o existente para: ${this.currentUser.usuario}`);
            } catch (e) {
                localStorage.removeItem('supabase_user');
            }
        }
    }

    getCurrentUser() {
        return this.currentUser;
    }

    async cadastrarUsuario(usuario, senha, nome_completo) {
        try {
            const { data, error } = await this.supabase
                .from('usuarios')
                .insert([{ usuario, senha, nome_completo }])
                .select()
                .single();
            if (error) {
                if (error.code === '23505') return { success: false, error: 'Este nome de usu√°rio j√° existe.' };
                return { success: false, error: 'Erro ao criar conta.', details: error };
            }
            return { success: true, userData: data };
        } catch (error) {
            return { success: false, error: 'Erro de conex√£o.', details: error };
        }
    }
    
    async logarUsuario(usuario, senha) {
        try {
            const { data, error } = await this.supabase
                .from('usuarios')
                .select('*')
                .eq('usuario', usuario)
                .eq('senha', senha)
                .single();
            if (error || !data) {
                return { success: false, error: 'Usu√°rio ou senha inv√°lidos.' };
            }
            this.currentUser = data;
            localStorage.setItem('supabase_user', JSON.stringify(data));
            return { success: true, userData: data };
        } catch (error) {
            return { success: false, error: 'Erro de conex√£o.', details: error };
        }
    }

    logout() {
        localStorage.removeItem('supabase_user');
        this.currentUser = null;
        console.log('üëã Usu√°rio deslogado.');
    }

    // --- M√©todos do Editor (Richtext) ---

    async salvarRichtextAnotacoes(semana, conteudoHtml) {
        if (!this.currentUser) return { success: false, error: 'Usu√°rio n√£o logado' };
        try {
            // Tenta verificar se j√° existe para decidir entre INSERT e UPDATE
            const { data: existing } = await this.supabase
                .from('richtext_anotacoes')
                .select('id')
                .eq('usuario_id', this.currentUser.id)
                .eq('semana', semana)
                .eq('tipo', 'richtext')
                .maybeSingle();

            let result;
            if (existing) {
                result = await this.supabase
                    .from('richtext_anotacoes')
                    .update({ conteudo_html: conteudoHtml, atualizado_em: new Date().toISOString() })
                    .eq('id', existing.id)
                    .select().single();
            } else {
                result = await this.supabase
                    .from('richtext_anotacoes')
                    .insert({
                        usuario_id: this.currentUser.id,
                        semana: semana,
                        tipo: 'richtext',
                        conteudo_html: conteudoHtml
                    })
                    .select().single();
            }

            if (result.error) return { success: false, error: 'Erro no banco de dados', details: result.error };
            return { success: true, data: result.data };
        } catch (error) {
            return { success: false, error: 'Erro de conex√£o', details: error };
        }
    }

    async carregarRichtextAnotacoes(semana) {
        if (!this.currentUser) return null;
        try {
            const { data, error } = await this.supabase
                .from('richtext_anotacoes')
                .select('conteudo_html')
                .eq('usuario_id', this.currentUser.id)
                .eq('semana', semana)
                .eq('tipo', 'richtext')
                .maybeSingle();
            if (error) return null;
            return data ? data.conteudo_html : null;
        } catch (error) {
            return null;
        }
    }

    // --- M√©todos das Anota√ß√µes da Sentinela (Clickable) ---

    async salvarSentinelaAnotacoes(semana, estudoId, anotacoes) {
        if (!this.currentUser) {
            return { success: false, error: 'Usu√°rio n√£o logado' };
        }
        try {
            const conteudoWrapper = {
                estudo: estudoId,
                anotacoes: anotacoes,
                timestamp: new Date().toISOString()
            };
            const conteudoJSON = JSON.stringify(conteudoWrapper);

            // PASSO 1: Verifica se j√° existe um registro para esta combina√ß√£o
            const { data: existing, error: selectError } = await this.supabase
                .from('richtext_anotacoes')
                .select('id')
                .eq('usuario_id', this.currentUser.id)
                .eq('semana', semana)
                .eq('tipo', 'sentinela_anotacoes')
                .maybeSingle();

            if (selectError) {
                console.error('‚ùå Erro ao verificar anota√ß√£o existente:', selectError);
                return { success: false, error: 'Erro ao checar dados', details: selectError };
            }

            let result;
            if (existing) {
                // PASSO 2a: Se existe, ATUALIZA (UPDATE)
                console.log(`üîÑ Atualizando anota√ß√µes existentes para semana ${semana}`);
                const { data, error } = await this.supabase
                    .from('richtext_anotacoes')
                    .update({
                        conteudo_html: conteudoJSON,
                        atualizado_em: new Date().toISOString()
                    })
                    .eq('id', existing.id)
                    .select()
                    .single();
                result = { data, error };
            } else {
                // PASSO 2b: Se n√£o existe, INSERE (INSERT)
                console.log(`‚ûï Inserindo novas anota√ß√µes para semana ${semana}`);
                const { data, error } = await this.supabase
                    .from('richtext_anotacoes')
                    .insert({
                        usuario_id: this.currentUser.id,
                        semana: semana,
                        tipo: 'sentinela_anotacoes',
                        conteudo_html: conteudoJSON,
                        atualizado_em: new Date().toISOString()
                    })
                    .select()
                    .single();
                result = { data, error };
            }

            if (result.error) {
                console.error('‚ùå Erro final ao salvar anota√ß√µes da Sentinela:', result.error);
                return { success: false, error: 'Erro no banco de dados', details: result.error };
            }

            console.log(`‚úÖ Anota√ß√µes da Sentinela (semana ${semana}) salvas com sucesso.`);
            return { success: true, data: result.data };

        } catch (error) {
            console.error('‚ùå Erro inesperado no processo de salvar anota√ß√µes:', error);
            return { success: false, error: 'Erro interno no c√≥digo', details: error };
        }
    }

    async carregarSentinelaAnotacoes(semana, estudoId) {
        if (!this.currentUser) return null;
        try {
            const { data, error } = await this.supabase
                .from('richtext_anotacoes')
                .select('conteudo_html')
                .eq('usuario_id', this.currentUser.id)
                .eq('semana', semana)
                .eq('tipo', 'sentinela_anotacoes')
                .maybeSingle();

            if (error) {
                console.error('‚ùå Erro ao carregar anota√ß√µes da Sentinela:', error);
                return null;
            }
            if (data && data.conteudo_html) {
                const conteudoWrapper = JSON.parse(data.conteudo_html);
                if (conteudoWrapper.estudo !== estudoId) {
                    console.warn(`Anota√ß√£o encontrada para o estudo ${conteudoWrapper.estudo}, mas a p√°gina √© do estudo ${estudoId}.`);
                }
                console.log(`üìñ Anota√ß√µes da Sentinela (semana ${semana}) carregadas.`);
                return conteudoWrapper.anotacoes || null;
            }
            return null;
        } catch (error) {
            console.error('‚ùå Erro inesperado ao carregar anota√ß√µes da Sentinela:', error);
            return null;
        }
    }
}

// Bloco de Instancia√ß√£o Seguro
try {
    if (typeof SupabaseSync !== 'undefined') {
        window.SupabaseSync = new SupabaseSync();
        console.log('‚úÖüéâ SUCESSO: window.SupabaseSync foi criado e est√° pronto para ser usado.');
    }
} catch (error) {
    console.error('‚ùå CR√çTICO: Falha ao instanciar SupabaseSync. O objeto n√£o foi criado. Erro:', error);
}