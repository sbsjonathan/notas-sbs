// save/supabase.js - Vers√£o FINAL E COMPLETA (Seu Login Robusto + Nova L√≥gica de Salvamento)

class SupabaseSync {
    constructor() {
        this.supabase = null;
        this.currentUser = null;
        this.isOnline = navigator.onLine;
        
        this.init();
    }

    async init() {
        try {
            await this.loadSupabaseLibrary();
            const { createClient } = supabase;
            this.supabase = createClient(
                window.SUPABASE_CONFIG.url,
                window.SUPABASE_CONFIG.anonKey
            );
            console.log('‚úÖ Supabase conectado');
            this.checkExistingSession();
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao conectar Supabase:', error);
            return false;
        }
    }

    async loadSupabaseLibrary() {
        return new Promise((resolve, reject) => {
            if (typeof supabase !== 'undefined') {
                resolve();
                return;
            }
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    async checkExistingSession() {
        try {
            const savedUser = localStorage.getItem('supabase_user');
            if (savedUser) {
                const userData = JSON.parse(savedUser);
                this.currentUser = userData;
                console.log('üë§ Usu√°rio logado (localStorage):', this.currentUser.usuario);
                this.validateUserInBackground(userData);
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar sess√£o:', error);
        }
    }

    async validateUserInBackground(userData) {
        try {
            const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000));
            const validationPromise = this.supabase.from('usuarios').select('*').eq('id', userData.id).single();
            const { data: validUser, error } = await Promise.race([validationPromise, timeoutPromise]);
            
            if (error) {
                if (error.code === 'PGRST116') {
                    console.log('‚ùå Usu√°rio n√£o existe - removendo login');
                    localStorage.removeItem('supabase_user');
                    this.currentUser = null;
                } else {
                    console.log('‚ö†Ô∏è Erro na valida√ß√£o (mantendo login):', error.message);
                }
            } else if (validUser) {
                console.log('‚úÖ Login validado online com sucesso');
                this.currentUser = validUser;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Timeout/erro de rede na valida√ß√£o - mantendo login');
        }
    }

    async hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password + 'salt_app_2024');
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    async cadastrarUsuario(usuario, senha, nomeCompleto = '') {
        try {
            const senhaHash = await this.hashPassword(senha);
            const { data: existing } = await this.supabase.from('usuarios').select('id').eq('usuario', usuario).maybeSingle();
            if (existing) {
                return { success: false, error: 'Nome de usu√°rio j√° existe' };
            }
            const { data, error } = await this.supabase.from('usuarios').insert({ usuario, senha_hash: senhaHash, nome_completo: nomeCompleto || usuario }).select('*').single();
            if (error) {
                console.error('‚ùå Erro no cadastro:', error);
                return { success: false, error: 'Erro ao criar conta' };
            }
            console.log('‚úÖ Usu√°rio cadastrado:', data);
            return { success: true, userData: data };
        } catch (error) {
            console.error('‚ùå Erro no cadastro:', error);
            return { success: false, error: 'Erro interno' };
        }
    }

    async logarUsuario(usuario, senha) {
        try {
            const senhaHash = await this.hashPassword(senha);
            const { data: userData, error } = await this.supabase.from('usuarios').select('*').eq('usuario', usuario).eq('senha_hash', senhaHash).single();
            if (error || !userData) {
                return { success: false, error: 'Usu√°rio ou senha incorretos' };
            }
            this.currentUser = userData;
            localStorage.setItem('supabase_user', JSON.stringify({ id: userData.id, usuario: userData.usuario, nome: userData.nome_completo }));
            console.log('‚úÖ Login realizado:', userData.usuario);
            return { success: true, userData: userData };
        } catch (error) {
            console.error('‚ùå Erro no login:', error);
            return { success: false, error: 'Erro interno' };
        }
    }

    logout() {
        this.currentUser = null;
        localStorage.removeItem('supabase_user');
        console.log('üëã Logout realizado');
    }

    isLoggedIn() {
        return this.currentUser !== null || localStorage.getItem('supabase_user') !== null;
    }
    
    getCurrentUser() {
        if (this.currentUser) return this.currentUser;
        const saved = localStorage.getItem('supabase_user');
        if (saved) {
            try { return JSON.parse(saved); } catch (e) { localStorage.removeItem('supabase_user'); }
        }
        return null;
    }

    // --- M√âTODOS PARA A NOVA TABELA "richtext_anotacoes" ---
    
    async salvarRichtextAnotacoes(semana, conteudoHtml) {
        if (!this.isLoggedIn()) return { success: false, error: 'Usu√°rio n√£o logado' };
        try {
            const { data: existing } = await this.supabase.from('richtext_anotacoes').select('id').eq('usuario_id', this.currentUser.id).eq('semana', semana).eq('tipo', 'richtext').maybeSingle();
            let result;
            if (existing) {
                result = await this.supabase.from('richtext_anotacoes').update({ conteudo_html: conteudoHtml, atualizado_em: new Date().toISOString() }).eq('id', existing.id).select().single();
            } else {
                result = await this.supabase.from('richtext_anotacoes').insert({ usuario_id: this.currentUser.id, semana, tipo: 'richtext', conteudo_html: conteudoHtml }).select().single();
            }
            if (result.error) return { success: false, error: 'Erro no banco de dados', details: result.error };
            return { success: true, data: result.data };
        } catch (error) {
            return { success: false, error: 'Erro de conex√£o', details: error };
        }
    }

    async carregarRichtextAnotacoes(semana) {
        if (!this.isLoggedIn()) return null;
        try {
            const { data, error } = await this.supabase.from('richtext_anotacoes').select('conteudo_html').eq('usuario_id', this.currentUser.id).eq('semana', semana).eq('tipo', 'richtext').maybeSingle();
            if (error) return null;
            return data ? data.conteudo_html : null;
        } catch (error) {
            return null;
        }
    }

    async salvarSentinelaAnotacoes(semana, estudoId, anotacoes) {
        if (!this.isLoggedIn()) return { success: false, error: 'Usu√°rio n√£o logado' };
        try {
            const conteudoWrapper = { estudo: estudoId, anotacoes, timestamp: new Date().toISOString() };
            const conteudoJSON = JSON.stringify(conteudoWrapper);
            const { data: existing, error: selectError } = await this.supabase.from('richtext_anotacoes').select('id').eq('usuario_id', this.currentUser.id).eq('semana', semana).eq('tipo', 'sentinela_anotacoes').maybeSingle();
            if (selectError) return { success: false, error: 'Erro ao checar dados', details: selectError };
            let result;
            if (existing) {
                result = await this.supabase.from('richtext_anotacoes').update({ conteudo_html: conteudoJSON, atualizado_em: new Date().toISOString() }).eq('id', existing.id).select().single();
            } else {
                result = await this.supabase.from('richtext_anotacoes').insert({ usuario_id: this.currentUser.id, semana, tipo: 'sentinela_anotacoes', conteudo_html: conteudoJSON }).select().single();
            }
            if (result.error) return { success: false, error: 'Erro no banco de dados', details: result.error };
            return { success: true, data: result.data };
        } catch (error) {
            return { success: false, error: 'Erro interno no c√≥digo', details: error };
        }
    }
    
    async carregarSentinelaAnotacoes(semana, estudoId) {
        if (!this.isLoggedIn()) return null;
        try {
            const { data, error } = await this.supabase.from('richtext_anotacoes').select('conteudo_html').eq('usuario_id', this.currentUser.id).eq('semana', semana).eq('tipo', 'sentinela_anotacoes').maybeSingle();
            if (error) return null;
            if (data && data.conteudo_html) {
                const cw = JSON.parse(data.conteudo_html);
                if (cw.estudo !== estudoId) console.warn(`Anota√ß√£o encontrada para o estudo ${cw.estudo}, mas a p√°gina √© do estudo ${estudoId}.`);
                return cw.anotacoes || null;
            }
            return null;
        } catch (error) {
            return null;
        }
    }

    // --- M√âTODOS PARA A TABELA ANTIGA "anotacoes" (Mantidos para compatibilidade) ---

    async salvarAnotacoes(semana, conteudo) {
        // ... (seu c√≥digo original para salvar em 'anotacoes')
    }
    async carregarAnotacoes(semana) {
        // ... (seu c√≥digo original para carregar de 'anotacoes')
    }
    async listarSemanas() {
        // ... (seu c√≥digo original para listar de 'anotacoes')
    }
}

// Inst√¢ncia global segura
try {
    window.SupabaseSync = new SupabaseSync();
    console.log('‚úÖüéâ SUCESSO: window.SupabaseSync foi criado e est√° pronto.');
} catch(e) {
    console.error("‚ùå CR√çTICO: Falha ao instanciar SupabaseSync.", e);
}