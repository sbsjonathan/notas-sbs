// scriptbbl-container.js - Vers√£o simplificada para o projeto Container
// Remove depend√™ncias do sistema Sentinela (cacheRestored, mark.js, etc.)

document.addEventListener('DOMContentLoaded', () => {
  console.log('üü¢ scriptbbl-container.js iniciando...');

  // Verifica se as abrevia√ß√µes foram carregadas
  if (typeof ABREVIACOES === 'undefined') {
    console.error("ERRO: O arquivo abrev.js n√£o foi carregado.");
    return;
  }
  
  let isModalOpen = false;

  // Fun√ß√µes para bloquear/desbloquear sele√ß√£o de texto
  function blockTextSelection() {
    document.body.classList.add('no-select-global');
  }

  function unblockTextSelection() {
    document.body.classList.remove('no-select-global');
  }

  // Elementos do modal
  const modal = document.getElementById('modal-biblia');
  const modalCorpo = document.getElementById('modal-biblia-corpo');
  const botaoFechar = document.getElementById('modal-biblia-fechar');
  const modalContent = document.querySelector('.modal-biblia-content');

  // Fun√ß√£o principal para abrir o modal b√≠blico
  async function abrirModalBibl(referencia) {
    isModalOpen = true;
    blockTextSelection();
    
    // Cria o modal se n√£o existir
    ensureModalExists();
    
    const modalElement = document.getElementById('modal-biblia');
    const modalCorpoElement = document.getElementById('modal-biblia-corpo');
    
    modalElement.style.display = 'flex';
    document.body.style.overflow = "hidden";
    
    // Bloqueia sele√ß√£o em todo o documento
    document.body.style.userSelect = 'none';
    document.body.style.webkitUserSelect = 'none';
    document.body.style.mozUserSelect = 'none';
    document.body.style.msUserSelect = 'none';
    
    modalCorpoElement.innerHTML = '<h3>Carregando...</h3>';
    
    try {
      const resultado = await buscarVersiculo(referencia);
      modalCorpoElement.innerHTML = `<h3>${resultado.titulo}</h3><div>${resultado.texto}</div>`;
    } catch (error) {
      console.error('Erro ao buscar vers√≠culo:', error);
      modalCorpoElement.innerHTML = '<h3>Erro</h3><div>N√£o foi poss√≠vel carregar o vers√≠culo.</div>';
    }
  }

  // Fun√ß√£o para verificar se √© uma refer√™ncia b√≠blica v√°lida e abrir modal
  function abrirModalSeForRef(el) {
    const ref = el.textContent.trim();
    
    // Se tiver ponto e v√≠rgula, j√° sabemos que √© complexa
    if (ref.includes(';')) {
      console.log('üéØ Detectadas m√∫ltiplas refer√™ncias:', ref);
      abrirModalBibl(ref);
      return;
    }
    
    // L√≥gica para refer√™ncias simples ou com range de cap√≠tulos
    if (/^[1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+\s\d+:[\d,\s-‚Äì‚Äî]+$/.test(ref) || 
        /^[1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+\s\d+:\d+\s*[-‚Äì‚Äî]\s*\d+:\d+$/.test(ref)) {
      abrirModalBibl(ref);
    }
  }

  // Fun√ß√£o para fechar o modal
  function fecharModal() {
    const modalElement = document.getElementById('modal-biblia');
    if (modalElement) {
      modalElement.style.display = 'none';
    }
    document.body.style.overflow = "";
    
    // Restaura sele√ß√£o de texto
    document.body.style.userSelect = '';
    document.body.style.webkitUserSelect = '';
    document.body.style.mozUserSelect = '';
    document.body.style.msUserSelect = '';
    
    isModalOpen = false;
    setTimeout(() => { unblockTextSelection(); }, 100);
  }

  // Fun√ß√£o para garantir que o modal existe no DOM
  function ensureModalExists() {
    if (!document.getElementById('modal-biblia')) {
      const modalHTML = `
        <div id="modal-biblia">
          <div class="modal-biblia-content">
            <span id="modal-biblia-fechar">&times;</span>
            <div id="modal-biblia-corpo"></div>
          </div>
        </div>
      `;
      document.body.insertAdjacentHTML('beforeend', modalHTML);
      
      // Adiciona listeners ao modal rec√©m-criado
      setupModalListeners();
    }
  }

  // Configura os listeners do modal
  function setupModalListeners() {
    const modalElement = document.getElementById('modal-biblia');
    const botaoFecharElement = document.getElementById('modal-biblia-fechar');
    const modalContentElement = document.querySelector('.modal-biblia-content');

    if (botaoFecharElement) {
      botaoFecharElement.addEventListener('click', fecharModal);
    }
    
    if (modalElement) {
      modalElement.addEventListener('click', fecharModal);
    }
    
    if (modalContentElement) {
      modalContentElement.addEventListener('click', e => e.stopPropagation());
      modalContentElement.addEventListener('touchstart', e => e.stopPropagation());
    }
    
    window.addEventListener('keydown', e => { 
      if (e.key === 'Escape') fecharModal(); 
    });
  }

  // Fun√ß√£o para processar m√∫ltiplas refer√™ncias
  async function processarMultiplasReferencias(refString) {
    const referencias = refString.split(';').map(ref => ref.trim()).filter(ref => ref.length > 0);
    
    let resultadosCompletos = [];
    let nomeLivroBase = '';
    let titulosParaMostrar = [];

    for (let i = 0; i < referencias.length; i++) {
      let refAtual = referencias[i].trim();
      
      if (i > 0 && /^\d+:[\d,\s-‚Äì‚Äî]+$/.test(refAtual)) {
        const primeiraRef = referencias[0];
        const matchPrimeiraRef = primeiraRef.match(/^([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+)\s/);
        if (matchPrimeiraRef) {
          refAtual = matchPrimeiraRef[1] + ' ' + refAtual;
        }
      }

      const resultado = await buscarVersiculo(refAtual);
      
      if (resultado.titulo !== "Refer√™ncia Inv√°lida" && 
          resultado.titulo !== "N√£o Encontrado" && 
          resultado.titulo !== "Livro n√£o encontrado") {
        resultadosCompletos.push(resultado);
        if (nomeLivroBase === '') {
          const livroMatch = resultado.titulo.match(/^([^0-9]+)/);
          if (livroMatch) nomeLivroBase = livroMatch[1].trim();
        }
        titulosParaMostrar.push(resultado.titulo.replace(nomeLivroBase, '').trim());
      }
    }

    if (resultadosCompletos.length === 0) {
      return { titulo: "Refer√™ncias Inv√°lidas", texto: "Nenhuma das refer√™ncias p√¥de ser encontrada." };
    }
    
    const capitulosUnicos = new Set(resultadosCompletos.map(r => r.titulo.match(/(\d+):/)?.[1]).filter(Boolean));
    const temMultiplosCapitulos = capitulosUnicos.size > 1;

    const tituloFinal = nomeLivroBase + ' ' + titulosParaMostrar.join('; ');
    let textoFinal = '';
    let capitulosJaMostrados = new Set();
    
    resultadosCompletos.forEach((resultado, index) => {
      const numeroCapitulo = resultado.titulo.match(/(\d+):/)?.[1];
      
      if (temMultiplosCapitulos && numeroCapitulo && !capitulosJaMostrados.has(numeroCapitulo)) {
        if (index > 0) {
          textoFinal += '<div style="margin: 20px 0 15px 0; border-top: 2px solid #ddd; padding-top: 15px;"></div>';
        }
        textoFinal += `<div style="margin-bottom: 12px;"><strong style="font-style: italic; color: #666; font-size: 1.1em;">Cap√≠tulo ${numeroCapitulo}</strong></div>`;
        capitulosJaMostrados.add(numeroCapitulo);
      } else if (index > 0) {
        textoFinal += '<div style="margin-top: 15px;"></div>';
      }
      
      textoFinal += resultado.texto;
    });

    return { titulo: tituloFinal, texto: textoFinal };
  }

  // Fun√ß√£o principal para buscar vers√≠culos
  async function buscarVersiculo(refString) {
    if (refString.includes(';')) {
      return await processarMultiplasReferencias(refString);
    }
    
    let multiCapMatch = refString.match(/^([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+)\s?(\d{1,3}):(\d{1,3})\s*[-‚Äì‚Äî]\s*(\d{1,3}):(\d{1,3})$/);
    let singleCapMatch = refString.match(/^([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+)\s?(\d{1,3}):([\d,\s-‚Äì‚Äî]+)/);

    if (!multiCapMatch && !singleCapMatch) {
      return { titulo: "Refer√™ncia Inv√°lida", texto: "Formato n√£o reconhecido." };
    }
    
    const isMultiCap = !!multiCapMatch;
    const match = isMultiCap ? multiCapMatch : singleCapMatch;
    
    // Localizador de livros - CORRIGIDO
    let nomeAbreviado = match[1].replace('.', '').trim();
    
    const mapeamentosEspeciais = {
      'Deut': 'deuteronomio',
      'G√°l': 'galatas',
      'G√™n': 'genesis'
    };
    
    const nomeLivro = mapeamentosEspeciais[nomeAbreviado] || 
                     ABREVIACOES[nomeAbreviado] || 
                     nomeAbreviado.toLowerCase().replace(/\s/g, '');

    let dados;
    try {
      const resp = await fetch(`biblia/data/${nomeLivro}.json`);
      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
      dados = await resp.json();
    } catch (e) {
      console.error(`Erro ao buscar biblia/data/${nomeLivro}.json:`, e);
      return { titulo: "Livro n√£o encontrado", texto: `O livro "${nomeAbreviado}" n√£o foi encontrado.` };
    }

    let textoHtml = "";
    let versosColetados = [];

    if (isMultiCap) {
      let capIni = parseInt(match[2]), versIni = parseInt(match[3]);
      let capFim = parseInt(match[4]), versFim = parseInt(match[5]);

      for (let c = capIni; c <= capFim; c++) {
        const capObj = dados.capitulos.find(chap => chap.capitulo === c);
        if (!capObj) continue;

        let versiculosDoCapitulo = [];
        if (c === capIni && c === capFim) {
          versiculosDoCapitulo = capObj.versiculos.filter(v => v.verso >= versIni && v.verso <= versFim);
        } else if (c === capIni) {
          versiculosDoCapitulo = capObj.versiculos.filter(v => v.verso >= versIni);
        } else if (c === capFim) {
          versiculosDoCapitulo = capObj.versiculos.filter(v => v.verso <= versFim);
        } else {
          versiculosDoCapitulo = capObj.versiculos;
        }
        
        versosColetados.push(...versiculosDoCapitulo.map(v => ({...v, capitulo: c})));
      }
    } else {
      const capituloNum = parseInt(match[2]);
      const capObj = dados.capitulos.find(c => c.capitulo === capituloNum);
      if (!capObj) return { titulo: "N√£o Encontrado", texto: `Cap√≠tulo ${capituloNum} n√£o encontrado.` };
      
      match[3].split(',').forEach(item => {
        if (item.includes('-')) {
          const [ini, fim] = item.split('-').map(Number);
          versosColetados.push(...capObj.versiculos.filter(v => v.verso >= ini && v.verso <= fim));
        } else {
          const verso = capObj.versiculos.find(v => v.verso === Number(item));
          if (verso) versosColetados.push(verso);
        }
      });
    }

    if (versosColetados.length > 0) {
      const temMultiplosCapitulos = new Set(versosColetados.map(v => v.capitulo)).size > 1;
      
      versosColetados.forEach(verso => {
        const prefixo = temMultiplosCapitulos && verso.capitulo ? `${verso.capitulo}:` : '';
        textoHtml += `<p><strong>${prefixo}${verso.verso}</strong> ${verso.texto}</p>`;
      });
      
      // CORRIGIDO: Usa o nome real do livro dos dados JSON
      const tituloLivro = dados.nome || nomeAbreviado;
      return { titulo: `${tituloLivro} ${match[2]}:${match[3]}`, texto: textoHtml };
    } else {
      return { titulo: "N√£o Encontrado", texto: "Nenhum vers√≠culo encontrado para esta refer√™ncia." };
    }
  }

  // Adiciona listeners para links .bbl j√° existentes no DOM
  function addListenersToExistingLinks() {
    document.querySelectorAll('a.bbl').forEach(el => {
      setupBblLinkListeners(el);
    });
  }

  // Configura listeners para um link .bbl espec√≠fico
  function setupBblLinkListeners(linkEl) {
    linkEl.style.cursor = 'pointer';
    let pressTimer = null;
    let moveTooMuch = false;
    let startX = 0, startY = 0;

    const touchStartHandler = (e) => {
      if (e.touches.length > 1) return;
      moveTooMuch = false;
      blockTextSelection();
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
      linkEl.classList.add('pressionando');
      
      pressTimer = setTimeout(() => {
        if (!moveTooMuch) {
          linkEl.classList.remove('pressionando');
          linkEl.classList.add('ref-aberta');
          setTimeout(() => {
            abrirModalSeForRef(linkEl);
            linkEl.classList.remove('ref-aberta');
          }, 200);
        }
      }, 300);
    };

    const touchMoveHandler = (e) => {
      const touch = e.touches[0];
      if (Math.abs(touch.clientX - startX) > 10 || Math.abs(touch.clientY - startY) > 10) {
        moveTooMuch = true;
        clearTimeout(pressTimer);
        linkEl.classList.remove('pressionando');
      }
    };

    const resetHandler = () => {
      clearTimeout(pressTimer);
      linkEl.classList.remove('pressionando', 'ref-aberta');
      if (!isModalOpen) {
        setTimeout(() => { unblockTextSelection(); }, 50);
      }
    };

    linkEl.addEventListener('touchstart', touchStartHandler);
    linkEl.addEventListener('touchmove', touchMoveHandler);
    linkEl.addEventListener('touchend', resetHandler);
    linkEl.addEventListener('touchcancel', resetHandler);
    linkEl.addEventListener('contextmenu', e => e.preventDefault());
  }

  // CORRIGIDO: S√≥ configura se o modal J√Å existir no DOM
  if (modal && botaoFechar && modalContent) {
    setupModalListeners();
  }

  // Adiciona listeners para links existentes
  addListenersToExistingLinks();

  // Torna as fun√ß√µes dispon√≠veis globalmente para o plugin leitor.js
  window.abrirModalBibl = abrirModalBibl;
  window.buscarVersiculo = buscarVersiculo;
  window.abrirModalSeForRef = abrirModalSeForRef;
  window.setupBblLinkListeners = setupBblLinkListeners;

  console.log('‚úÖ Sistema b√≠blico simplificado carregado para Container');
});