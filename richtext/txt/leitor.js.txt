// leitor.js - Plugin de Modo Leitura B√≠blica (Slot 6)

class LeitorPlugin {
  constructor() {
    this.name = 'leitor';
    this.slotId = 6; // Slot 6 (flex: 0.5)
    
    this.editor = null;
    this.leitorBtn = null;
    this.isReadingMode = false;
    this.originalContent = '';
    
    this._retryMs = 100;
    
    // Regex para detectar refer√™ncias b√≠blicas
    this.biblicalReferences = [
      // Padr√£o b√°sico: "Jo. 3:16", "1 Cor. 13:4-7"
      /\b([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+)\s?(\d{1,3}):(\d{1,3}(?:\s*[-‚Äì‚Äî]\s*\d{1,3})?)\b/g,
      // Padr√£o com m√∫ltiplos vers√≠culos: "Jo. 3:16,17"
      /\b([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+)\s?(\d{1,3}):([\d,\s-‚Äì‚Äî]+)\b/g,
      // Padr√£o com m√∫ltiplas refer√™ncias: "Jo. 3:16; 1 Cor. 13:4"
      /\b([1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]+\s?\d{1,3}:[\d,\s-‚Äì‚Äî]+(?:\s*;\s*[1-3]?\s?[A-Za-z√™√ä√£√É√≠√ç√≥√ì√¢√Ç√©√â√¥√î√∫√ö√ß√á.]*\s?\d{1,3}:[\d,\s-‚Äì‚Äî]+)*)\b/g
    ];

    this.autoRegister();
  }

  // === Boot ===
  autoRegister() {
    this.waitForDependency('toolbar', () => this.waitForSlotAndRegister());
  }

  waitForDependency(dependency, callback) {
    const check = () => {
      if (window[dependency]) {
        callback();
      } else {
        setTimeout(check, this._retryMs);
      }
    };
    check();
  }

  waitForSlotAndRegister() {
    const slotEl = document.getElementById(`plugin-slot-${this.slotId}`);
    if (slotEl) {
      this.register();
    } else {
      setTimeout(() => this.waitForSlotAndRegister(), this._retryMs);
    }
  }

  register() {
    const pluginHTML = `
      <div class="leitor-plugin">
        <button class="leitor-btn" id="leitor-plugin-btn" title="Modo Leitura B√≠blica" aria-label="Ativar modo de leitura b√≠blica" aria-pressed="false">
          <svg class="leitor-icon" viewBox="0 0 24 24">
            <path d="M12 3L1 9l11 6 11-6-11-6zM5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82z"/>
          </svg>
        </button>
      </div>
    `;

    const success = window.toolbar.registerPlugin(this.name, this.slotId, this, pluginHTML);
    if (!success) {
      setTimeout(() => this.register(), this._retryMs);
      return;
    }

    this.leitorBtn = document.getElementById('leitor-plugin-btn');
    
    // Usar 'mousedown' para prevenir perda de foco do editor
    this.leitorBtn.addEventListener('mousedown', (e) => {
      e.preventDefault();
      this.toggleReadingMode();
    });

    this.waitForDependency('editor', () => this.connectToEditor());
  }

  connectToEditor() {
    this.editor = window.editor;
    console.log('üîó Plugin Leitor B√≠blico conectado no slot 6');
  }

  // === L√≥gica Principal ===
  toggleReadingMode() {
    if (!this.editor) return;

    this.isReadingMode = !this.isReadingMode;
    
    if (this.isReadingMode) {
      this.enterReadingMode();
    } else {
      this.exitReadingMode();
    }
    
    this.updateButtonState();
  }

  enterReadingMode() {
    const editorEl = this.editor.editorElement;
    
    // Salva o conte√∫do original
    this.originalContent = editorEl.innerHTML;
    
    // Torna o editor completamente read-only
    editorEl.contentEditable = false;
    editorEl.classList.add('reading-mode');
    
    // CORRIGIDO: Bloqueia apenas eventos de EDI√á√ÉO, n√£o de sele√ß√£o
    this.blockEditing = this.blockEditing.bind(this);
    editorEl.addEventListener('keydown', this.blockEditing, true);
    editorEl.addEventListener('keypress', this.blockEditing, true);
    editorEl.addEventListener('keyup', this.blockEditing, true);
    editorEl.addEventListener('input', this.blockEditing, true);
    editorEl.addEventListener('paste', this.blockEditing, true);
    editorEl.addEventListener('cut', this.blockEditing, true);
    editorEl.addEventListener('copy', this.blockEditing, true);
    editorEl.addEventListener('drop', this.blockEditing, true);
    editorEl.addEventListener('dragover', this.blockEditing, true);
    editorEl.addEventListener('focus', this.blockEditing, true);
    editorEl.addEventListener('selectstart', this.blockEditing, true);
    // REMOVIDO: mousedown, mouseup (deixa o editor funcionar normalmente)
    
    // NOVO: Previne completamente sele√ß√£o e cursor via CSS
    editorEl.style.userSelect = 'none';
    editorEl.style.webkitUserSelect = 'none';
    editorEl.style.mozUserSelect = 'none';
    editorEl.style.msUserSelect = 'none';
    editorEl.style.caretColor = 'transparent';
    editorEl.style.cursor = 'default';
    
    // NOVO: Previne teclado virtual
    editorEl.setAttribute('readonly', 'true');
    editorEl.setAttribute('tabindex', '-1');
    
    // Remove foco do editor ANTES de transformar
    editorEl.blur();
    
    // Detecta e transforma refer√™ncias b√≠blicas
    this.transformBiblicalReferences();
    
    // Aguarda a transforma√ß√£o e ent√£o aplica os listeners
    setTimeout(() => {
      this.applyBiblicalListeners();
    }, 100);
    
    console.log('üìñ Modo leitura b√≠blica ativado - Editor bloqueado para edi√ß√£o');
  }

  exitReadingMode() {
    const editorEl = this.editor.editorElement;
    
    // Remove listeners das refer√™ncias b√≠blicas
    this.removeBiblicalListeners();
    
    // CORRIGIDO: Remove apenas os listeners que foram adicionados
    editorEl.removeEventListener('keydown', this.blockEditing, true);
    editorEl.removeEventListener('keypress', this.blockEditing, true);
    editorEl.removeEventListener('keyup', this.blockEditing, true);
    editorEl.removeEventListener('input', this.blockEditing, true);
    editorEl.removeEventListener('paste', this.blockEditing, true);
    editorEl.removeEventListener('cut', this.blockEditing, true);
    editorEl.removeEventListener('copy', this.blockEditing, true);
    editorEl.removeEventListener('drop', this.blockEditing, true);
    editorEl.removeEventListener('dragover', this.blockEditing, true);
    editorEl.removeEventListener('focus', this.blockEditing, true);
    editorEl.removeEventListener('selectstart', this.blockEditing, true);
    // REMOVIDO: mousedown, mouseup (n√£o foram adicionados)
    
    // Restaura TODAS as propriedades de edi√ß√£o
    editorEl.style.userSelect = '';
    editorEl.style.webkitUserSelect = '';
    editorEl.style.mozUserSelect = '';
    editorEl.style.msUserSelect = '';
    editorEl.style.caretColor = '';
    editorEl.style.cursor = '';
    
    // Restaura atributos de edi√ß√£o
    editorEl.removeAttribute('readonly');
    editorEl.removeAttribute('tabindex');
    
    // Restaura o conte√∫do original (remove as tags <a class="bbl">)
    editorEl.innerHTML = this.originalContent;
    
    // Torna o editor edit√°vel novamente
    editorEl.contentEditable = true;
    editorEl.classList.remove('reading-mode');
    
    // CORRIGIDO: Aguarda um pouco antes de focar para evitar bugs
    setTimeout(() => {
      editorEl.focus();
    }, 50);
    
    console.log('‚úèÔ∏è Modo leitura b√≠blica desativado - Editor restaurado completamente');
  }

  // Fun√ß√£o para bloquear apenas eventos de EDI√á√ÉO, n√£o de sele√ß√£o
  blockEditing(e) {
    // CORRIGIDO: N√£o bloqueia mousedown/mouseup que s√£o necess√°rios para sele√ß√£o
    if (e.type === 'mousedown' || e.type === 'mouseup') {
      return; // Deixa passar
    }
    
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
    
    // Remove foco se o elemento tentar focar
    if (e.target && typeof e.target.blur === 'function') {
      e.target.blur();
    }
    
    return false;
  }

  transformBiblicalReferences() {
    const editorEl = this.editor.editorElement;
    let content = editorEl.innerHTML;
    
    // Aplica cada regex para detectar diferentes padr√µes
    this.biblicalReferences.forEach(regex => {
      content = content.replace(regex, (match) => {
        // Verifica se j√° n√£o est√° dentro de uma tag <a class="bbl">
        if (match.includes('class="bbl"')) {
          return match;
        }
        
        return `<a class="bbl">${match}</a>`;
      });
    });
    
    editorEl.innerHTML = content;
  }

  applyBiblicalListeners() {
    // Verifica se o scriptbbl.js est√° carregado
    if (typeof window.abrirModalBibl !== 'function') {
      // Se n√£o estiver carregado, tenta carregar os scripts b√≠blicos
      this.loadBiblicalScripts();
      return;
    }

    // Aplica listeners para as refer√™ncias b√≠blicas
    const bblLinks = this.editor.editorElement.querySelectorAll('a.bbl');
    
    bblLinks.forEach(link => {
      this.setupBiblicalLinkListeners(link);
    });
  }

  setupBiblicalLinkListeners(linkEl) {
    linkEl.style.cursor = 'pointer';
    
    let pressTimer = null;
    let moveTooMuch = false;
    let startX = 0, startY = 0;

    const touchStartHandler = (e) => {
      // Importante: n√£o prevenir o comportamento padr√£o aqui
      // para permitir que o long-press funcione
      if (e.touches.length > 1) return;
      
      moveTooMuch = false;
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
      
      linkEl.classList.add('bbl-pressing');
      
      pressTimer = setTimeout(() => {
        if (!moveTooMuch) {
          linkEl.classList.remove('bbl-pressing');
          linkEl.classList.add('bbl-opening');
          
          // Vibra√ß√£o no iPhone se dispon√≠vel
          if (navigator.vibrate) {
            navigator.vibrate(50);
          }
          
          setTimeout(() => {
            this.openBiblicalModal(linkEl);
            linkEl.classList.remove('bbl-opening');
          }, 200);
        }
      }, 300); // 300ms para long-press
    };

    const touchMoveHandler = (e) => {
      const touch = e.touches[0];
      const deltaX = Math.abs(touch.clientX - startX);
      const deltaY = Math.abs(touch.clientY - startY);
      
      // Se mover mais que 10px, cancela o long-press
      if (deltaX > 10 || deltaY > 10) {
        moveTooMuch = true;
        clearTimeout(pressTimer);
        linkEl.classList.remove('bbl-pressing');
      }
    };

    const resetHandler = () => {
      clearTimeout(pressTimer);
      linkEl.classList.remove('bbl-pressing', 'bbl-opening');
    };

    // Adiciona os listeners com capture = true para maior controle
    linkEl.addEventListener('touchstart', touchStartHandler, { passive: true });
    linkEl.addEventListener('touchmove', touchMoveHandler, { passive: true });
    linkEl.addEventListener('touchend', resetHandler, { passive: true });
    linkEl.addEventListener('touchcancel', resetHandler, { passive: true });
    
    // Previne menu de contexto
    linkEl.addEventListener('contextmenu', e => e.preventDefault());
    
    // Para desktop: adiciona suporte a mouse
    linkEl.addEventListener('mousedown', (e) => {
      if (e.button === 0) { // Bot√£o esquerdo
        linkEl.classList.add('bbl-pressing');
        
        const mouseTimer = setTimeout(() => {
          linkEl.classList.remove('bbl-pressing');
          linkEl.classList.add('bbl-opening');
          
          setTimeout(() => {
            this.openBiblicalModal(linkEl);
            linkEl.classList.remove('bbl-opening');
          }, 200);
        }, 500); // Mais tempo para mouse
        
        const mouseUpHandler = () => {
          clearTimeout(mouseTimer);
          linkEl.classList.remove('bbl-pressing', 'bbl-opening');
          document.removeEventListener('mouseup', mouseUpHandler);
        };
        
        document.addEventListener('mouseup', mouseUpHandler);
      }
    });
  }

  removeBiblicalListeners() {
    const bblLinks = this.editor.editorElement.querySelectorAll('a.bbl');
    
    bblLinks.forEach(link => {
      // Remove todos os listeners clonando o elemento
      const newLink = link.cloneNode(true);
      link.parentNode.replaceChild(newLink, link);
    });
  }

  openBiblicalModal(linkEl) {
    const reference = linkEl.textContent.trim();
    
    // Verifica se a fun√ß√£o global existe (do scriptbbl.js)
    if (typeof window.abrirModalBibl === 'function') {
      window.abrirModalBibl(reference);
    } else {
      console.error('‚ùå Sistema b√≠blico n√£o carregado');
      // Fallback: tenta carregar e abrir
      this.loadBiblicalScripts().then(() => {
        if (typeof window.abrirModalBibl === 'function') {
          window.abrirModalBibl(reference);
        }
      });
    }
  }

  loadBiblicalScripts() {
    return new Promise((resolve, reject) => {
      // Verifica se j√° est√£o carregados
      if (typeof window.ABREVIACOES !== 'undefined' && typeof window.abrirModalBibl === 'function') {
        resolve();
        return;
      }

      let scriptsLoaded = 0;
      const totalScripts = 3;

      const checkComplete = () => {
        scriptsLoaded++;
        if (scriptsLoaded === totalScripts) {
          console.log('‚úÖ Scripts b√≠blicos carregados');
          resolve();
        }
      };

      // Carrega abrev.js
      if (!document.querySelector('script[src*="abrev.js"]')) {
        const abrevScript = document.createElement('script');
        abrevScript.src = 'biblia/abrev.js';
        abrevScript.onload = checkComplete;
        abrevScript.onerror = () => {
          console.error('‚ùå Erro ao carregar abrev.js');
          reject(new Error('Falha ao carregar abrev.js'));
        };
        document.head.appendChild(abrevScript);
      } else {
        checkComplete();
      }

      // Carrega scriptbbl.js
      if (!document.querySelector('script[src*="scriptbbl.js"]')) {
        const scriptbblScript = document.createElement('script');
        scriptbblScript.src = 'biblia/scriptbbl.js';
        scriptbblScript.onload = checkComplete;
        scriptbblScript.onerror = () => {
          console.error('‚ùå Erro ao carregar scriptbbl.js');
          reject(new Error('Falha ao carregar scriptbbl.js'));
        };
        document.head.appendChild(scriptbblScript);
      } else {
        checkComplete();
      }

      // Carrega stylebbl.css
      if (!document.querySelector('link[href*="stylebbl.css"]')) {
        const styleLink = document.createElement('link');
        styleLink.rel = 'stylesheet';
        styleLink.href = 'biblia/stylebbl.css';
        styleLink.onload = checkComplete;
        styleLink.onerror = () => {
          console.error('‚ùå Erro ao carregar stylebbl.css');
          reject(new Error('Falha ao carregar stylebbl.css'));
        };
        document.head.appendChild(styleLink);
      } else {
        checkComplete();
      }

      // Cria o modal se n√£o existir
      setTimeout(() => {
        this.ensureBiblicalModal();
      }, 500);
    });
  }

  ensureBiblicalModal() {
    if (!document.getElementById('modal-biblia')) {
      const modalHTML = `
        <div id="modal-biblia">
          <div class="modal-biblia-content">
            <span id="modal-biblia-fechar">&times;</span>
            <div id="modal-biblia-corpo"></div>
          </div>
        </div>
      `;
      
      document.body.insertAdjacentHTML('beforeend', modalHTML);
      console.log('üìñ Modal b√≠blico criado');
    }
  }

  updateButtonState() {
    if (!this.leitorBtn) return;
    
    if (this.isReadingMode) {
      this.leitorBtn.classList.add('active');
      this.leitorBtn.setAttribute('aria-pressed', 'true');
      this.leitorBtn.title = 'Sair do Modo Leitura';
    } else {
      this.leitorBtn.classList.remove('active');
      this.leitorBtn.setAttribute('aria-pressed', 'false');
      this.leitorBtn.title = 'Modo Leitura B√≠blica';
    }
  }
}

// === Auto-instancia√ß√£o ===
document.addEventListener('DOMContentLoaded', () => {
  new LeitorPlugin();
});

// Para compatibilidade se o DOM j√° estiver carregado
if (document.readyState !== 'loading') {
  new LeitorPlugin();
}